// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id          Int                @id @default(autoincrement())
  name        String             @db.VarChar(255)
  slug        String             @unique @db.VarChar(255)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  users       OrganizationUser[]
  dataSources DataSource[]
  roles       Role[]
  views       View[]
  activities  Activity[]

  @@index([slug])
}

model OrganizationUser {
  id             Int          @id @default(autoincrement())
  user           User         @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId         Int
  organization   Organization @relation(references: [id], fields: [organizationId], onDelete: Cascade)
  organizationId Int
  role           Role?        @relation(references: [id], fields: [roleId], onDelete: Cascade)
  roleId         Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  OrganizationInvitation OrganizationInvitation[]
  @@index([userId])
  @@index([organizationId])
}

model OrganizationInvitation {
  uuid               String           @id @db.Uuid
  organizationUser   OrganizationUser @relation(references: [id], fields: [organizationUserId], onDelete: Cascade)
  organizationUserId Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([organizationUserId])
}

model DataSource {
  id                      Int           @id @default(autoincrement())
  name                    String        @db.VarChar(255)
  options                 Json          @default("{}")
  encryptedCredentials    String?
  encryptedSSHCredentials String?
  type                    String        @db.VarChar(255)
  organization            Organization? @relation(references: [id], fields: [organizationId])
  organizationId          Int?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  views                   View[]
  activities              Activity[]

  @@index([organizationId])
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique @db.VarChar(255)
  emailVerified     DateTime?
  password          String    @default("") @db.VarChar(255)
  image             String?
  firstName         String?   @db.VarChar(255)
  lastName          String?   @db.VarChar(255)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoggedInAt    DateTime?
  lastKnownTimezone String?

  organizations OrganizationUser[]
  accounts      Account[]
  sessions      Session[]
  views         View[]
  activities    Activity[]
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Role {
  id                Int                @id @default(autoincrement())
  name              String
  options           Json               @default("{}")
  organization      Organization       @relation(references: [id], fields: [organizationId])
  organizationId    Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  organizationUsers OrganizationUser[]

  @@index([organizationId])
}

model View {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  public         Boolean      @default(false)
  user           User         @relation(references: [id], fields: [createdBy], onDelete: Cascade)
  createdBy      Int
  organization   Organization @relation(references: [id], fields: [organizationId], onDelete: Cascade)
  organizationId Int
  dataSource     DataSource   @relation(references: [id], fields: [dataSourceId], onDelete: Cascade)
  dataSourceId   Int
  tableName      String       @db.VarChar(255)
  filters        Json         @default("[]")
  columns        Json         @default("[]")
  defaultOrder   Json?        @default("[]")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  activities     Activity[]

  @@index([createdBy])
  @@index([organizationId])
  @@index([dataSourceId])
}

model Activity {
  id             Int          @id @default(autoincrement())
  recordId       String?      @db.VarChar(255)
  tableName      String?      @db.VarChar(255)
  dataSource     DataSource?  @relation(references: [id], fields: [dataSourceId], onDelete: Cascade)
  dataSourceId   Int?
  view           View?        @relation(references: [id], fields: [viewId], onDelete: Cascade)
  viewId         Int?
  user           User         @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId         Int
  organization   Organization @relation(references: [id], fields: [organizationId], onDelete: Cascade)
  organizationId Int
  action         String       @db.VarChar(255)
  changes        Json?        @default("[]")
  createdAt      DateTime     @default(now())

  @@index([dataSourceId])
  @@index([viewId])
  @@index([userId])
  @@index([organizationId])
}
