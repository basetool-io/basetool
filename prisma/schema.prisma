// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id          Int                @id @default(autoincrement())
  name        String             @db.VarChar(255)
  slug        String             @unique @db.VarChar(255)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  users       OrganizationUser[]
  dataSources DataSource[]

  @@index([slug])
}

model OrganizationUser {
  id             Int          @id @default(autoincrement())
  role           String       @default("member") @db.VarChar(255)
  user           User         @relation(references: [id], fields: [userId])
  userId         Int
  organization   Organization @relation(references: [id], fields: [organizationId])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([userId])
  @@index([organizationId])
}

model DataSource {
  id                   Int           @id @default(autoincrement())
  name                 String        @db.VarChar(255)
  options              Json          @default("{}")
  encryptedCredentials String?
  type                 String        @db.VarChar(255)
  organization         Organization? @relation(references: [id], fields: [organizationId])
  organizationId       Int?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@index([organizationId])
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            Int                @id @default(autoincrement())
  email         String             @unique @db.VarChar(255)
  emailVerified DateTime?
  password      String             @default("") @db.VarChar(255)
  image         String?
  firstName     String?            @db.VarChar(255)
  lastName      String?            @db.VarChar(255)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  organizations OrganizationUser[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
